/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.dcrticketmatcher.FindMatchesRequest', null, global);
goog.exportSymbol('proto.dcrticketmatcher.FindMatchesResponse', null, global);
goog.exportSymbol('proto.dcrticketmatcher.GenerateTicketRequest', null, global);
goog.exportSymbol('proto.dcrticketmatcher.GenerateTicketResponse', null, global);
goog.exportSymbol('proto.dcrticketmatcher.PublishTicketRequest', null, global);
goog.exportSymbol('proto.dcrticketmatcher.PublishTicketResponse', null, global);
goog.exportSymbol('proto.dcrticketmatcher.StatusRequest', null, global);
goog.exportSymbol('proto.dcrticketmatcher.StatusResponse', null, global);
goog.exportSymbol('proto.dcrticketmatcher.TxOut', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrticketmatcher.TxOut = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dcrticketmatcher.TxOut, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrticketmatcher.TxOut.displayName = 'proto.dcrticketmatcher.TxOut';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrticketmatcher.TxOut.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrticketmatcher.TxOut.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrticketmatcher.TxOut} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dcrticketmatcher.TxOut.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0),
    script: msg.getScript_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrticketmatcher.TxOut}
 */
proto.dcrticketmatcher.TxOut.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrticketmatcher.TxOut;
  return proto.dcrticketmatcher.TxOut.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrticketmatcher.TxOut} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrticketmatcher.TxOut}
 */
proto.dcrticketmatcher.TxOut.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setScript(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrticketmatcher.TxOut.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrticketmatcher.TxOut.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrticketmatcher.TxOut} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dcrticketmatcher.TxOut.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint64 value = 1;
 * @return {number}
 */
proto.dcrticketmatcher.TxOut.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.dcrticketmatcher.TxOut.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes script = 2;
 * @return {!(string|Uint8Array)}
 */
proto.dcrticketmatcher.TxOut.prototype.getScript = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes script = 2;
 * This is a type-conversion wrapper around `getScript()`
 * @return {string}
 */
proto.dcrticketmatcher.TxOut.prototype.getScript_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getScript()));
};


/**
 * optional bytes script = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScript()`
 * @return {!Uint8Array}
 */
proto.dcrticketmatcher.TxOut.prototype.getScript_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getScript()));
};


/** @param {!(string|Uint8Array)} value */
proto.dcrticketmatcher.TxOut.prototype.setScript = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrticketmatcher.FindMatchesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dcrticketmatcher.FindMatchesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrticketmatcher.FindMatchesRequest.displayName = 'proto.dcrticketmatcher.FindMatchesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrticketmatcher.FindMatchesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrticketmatcher.FindMatchesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrticketmatcher.FindMatchesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dcrticketmatcher.FindMatchesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrticketmatcher.FindMatchesRequest}
 */
proto.dcrticketmatcher.FindMatchesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrticketmatcher.FindMatchesRequest;
  return proto.dcrticketmatcher.FindMatchesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrticketmatcher.FindMatchesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrticketmatcher.FindMatchesRequest}
 */
proto.dcrticketmatcher.FindMatchesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrticketmatcher.FindMatchesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrticketmatcher.FindMatchesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrticketmatcher.FindMatchesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dcrticketmatcher.FindMatchesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 amount = 1;
 * @return {number}
 */
proto.dcrticketmatcher.FindMatchesRequest.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.dcrticketmatcher.FindMatchesRequest.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrticketmatcher.FindMatchesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dcrticketmatcher.FindMatchesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrticketmatcher.FindMatchesResponse.displayName = 'proto.dcrticketmatcher.FindMatchesResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrticketmatcher.FindMatchesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrticketmatcher.FindMatchesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrticketmatcher.FindMatchesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dcrticketmatcher.FindMatchesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    fee: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrticketmatcher.FindMatchesResponse}
 */
proto.dcrticketmatcher.FindMatchesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrticketmatcher.FindMatchesResponse;
  return proto.dcrticketmatcher.FindMatchesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrticketmatcher.FindMatchesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrticketmatcher.FindMatchesResponse}
 */
proto.dcrticketmatcher.FindMatchesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSessionId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrticketmatcher.FindMatchesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrticketmatcher.FindMatchesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrticketmatcher.FindMatchesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dcrticketmatcher.FindMatchesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional int32 session_id = 1;
 * @return {number}
 */
proto.dcrticketmatcher.FindMatchesResponse.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.dcrticketmatcher.FindMatchesResponse.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 amount = 2;
 * @return {number}
 */
proto.dcrticketmatcher.FindMatchesResponse.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.dcrticketmatcher.FindMatchesResponse.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 fee = 3;
 * @return {number}
 */
proto.dcrticketmatcher.FindMatchesResponse.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.dcrticketmatcher.FindMatchesResponse.prototype.setFee = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrticketmatcher.GenerateTicketRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dcrticketmatcher.GenerateTicketRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrticketmatcher.GenerateTicketRequest.displayName = 'proto.dcrticketmatcher.GenerateTicketRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrticketmatcher.GenerateTicketRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrticketmatcher.GenerateTicketRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrticketmatcher.GenerateTicketRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dcrticketmatcher.GenerateTicketRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    commitmentOutput: (f = msg.getCommitmentOutput()) && proto.dcrticketmatcher.TxOut.toObject(includeInstance, f),
    changeOutput: (f = msg.getChangeOutput()) && proto.dcrticketmatcher.TxOut.toObject(includeInstance, f),
    voteAddress: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrticketmatcher.GenerateTicketRequest}
 */
proto.dcrticketmatcher.GenerateTicketRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrticketmatcher.GenerateTicketRequest;
  return proto.dcrticketmatcher.GenerateTicketRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrticketmatcher.GenerateTicketRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrticketmatcher.GenerateTicketRequest}
 */
proto.dcrticketmatcher.GenerateTicketRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSessionId(value);
      break;
    case 2:
      var value = new proto.dcrticketmatcher.TxOut;
      reader.readMessage(value,proto.dcrticketmatcher.TxOut.deserializeBinaryFromReader);
      msg.setCommitmentOutput(value);
      break;
    case 3:
      var value = new proto.dcrticketmatcher.TxOut;
      reader.readMessage(value,proto.dcrticketmatcher.TxOut.deserializeBinaryFromReader);
      msg.setChangeOutput(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVoteAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrticketmatcher.GenerateTicketRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrticketmatcher.GenerateTicketRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrticketmatcher.GenerateTicketRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dcrticketmatcher.GenerateTicketRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCommitmentOutput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.dcrticketmatcher.TxOut.serializeBinaryToWriter
    );
  }
  f = message.getChangeOutput();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.dcrticketmatcher.TxOut.serializeBinaryToWriter
    );
  }
  f = message.getVoteAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 session_id = 1;
 * @return {number}
 */
proto.dcrticketmatcher.GenerateTicketRequest.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.dcrticketmatcher.GenerateTicketRequest.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional TxOut commitment_output = 2;
 * @return {?proto.dcrticketmatcher.TxOut}
 */
proto.dcrticketmatcher.GenerateTicketRequest.prototype.getCommitmentOutput = function() {
  return /** @type{?proto.dcrticketmatcher.TxOut} */ (
    jspb.Message.getWrapperField(this, proto.dcrticketmatcher.TxOut, 2));
};


/** @param {?proto.dcrticketmatcher.TxOut|undefined} value */
proto.dcrticketmatcher.GenerateTicketRequest.prototype.setCommitmentOutput = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.dcrticketmatcher.GenerateTicketRequest.prototype.clearCommitmentOutput = function() {
  this.setCommitmentOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dcrticketmatcher.GenerateTicketRequest.prototype.hasCommitmentOutput = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TxOut change_output = 3;
 * @return {?proto.dcrticketmatcher.TxOut}
 */
proto.dcrticketmatcher.GenerateTicketRequest.prototype.getChangeOutput = function() {
  return /** @type{?proto.dcrticketmatcher.TxOut} */ (
    jspb.Message.getWrapperField(this, proto.dcrticketmatcher.TxOut, 3));
};


/** @param {?proto.dcrticketmatcher.TxOut|undefined} value */
proto.dcrticketmatcher.GenerateTicketRequest.prototype.setChangeOutput = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.dcrticketmatcher.GenerateTicketRequest.prototype.clearChangeOutput = function() {
  this.setChangeOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dcrticketmatcher.GenerateTicketRequest.prototype.hasChangeOutput = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string vote_address = 4;
 * @return {string}
 */
proto.dcrticketmatcher.GenerateTicketRequest.prototype.getVoteAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.dcrticketmatcher.GenerateTicketRequest.prototype.setVoteAddress = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrticketmatcher.GenerateTicketResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dcrticketmatcher.GenerateTicketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrticketmatcher.GenerateTicketResponse.displayName = 'proto.dcrticketmatcher.GenerateTicketResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrticketmatcher.GenerateTicketResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrticketmatcher.GenerateTicketResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrticketmatcher.GenerateTicketResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dcrticketmatcher.GenerateTicketResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: msg.getTransaction_asB64(),
    outputIndex: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrticketmatcher.GenerateTicketResponse}
 */
proto.dcrticketmatcher.GenerateTicketResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrticketmatcher.GenerateTicketResponse;
  return proto.dcrticketmatcher.GenerateTicketResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrticketmatcher.GenerateTicketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrticketmatcher.GenerateTicketResponse}
 */
proto.dcrticketmatcher.GenerateTicketResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransaction(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutputIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrticketmatcher.GenerateTicketResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrticketmatcher.GenerateTicketResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrticketmatcher.GenerateTicketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dcrticketmatcher.GenerateTicketResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getOutputIndex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional bytes transaction = 1;
 * @return {!(string|Uint8Array)}
 */
proto.dcrticketmatcher.GenerateTicketResponse.prototype.getTransaction = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes transaction = 1;
 * This is a type-conversion wrapper around `getTransaction()`
 * @return {string}
 */
proto.dcrticketmatcher.GenerateTicketResponse.prototype.getTransaction_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransaction()));
};


/**
 * optional bytes transaction = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransaction()`
 * @return {!Uint8Array}
 */
proto.dcrticketmatcher.GenerateTicketResponse.prototype.getTransaction_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransaction()));
};


/** @param {!(string|Uint8Array)} value */
proto.dcrticketmatcher.GenerateTicketResponse.prototype.setTransaction = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 output_index = 2;
 * @return {number}
 */
proto.dcrticketmatcher.GenerateTicketResponse.prototype.getOutputIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.dcrticketmatcher.GenerateTicketResponse.prototype.setOutputIndex = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrticketmatcher.PublishTicketRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dcrticketmatcher.PublishTicketRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrticketmatcher.PublishTicketRequest.displayName = 'proto.dcrticketmatcher.PublishTicketRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrticketmatcher.PublishTicketRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrticketmatcher.PublishTicketRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrticketmatcher.PublishTicketRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dcrticketmatcher.PublishTicketRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    splitTx: msg.getSplitTx_asB64(),
    splitTxOutputIndex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ticketInputScriptsig: msg.getTicketInputScriptsig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrticketmatcher.PublishTicketRequest}
 */
proto.dcrticketmatcher.PublishTicketRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrticketmatcher.PublishTicketRequest;
  return proto.dcrticketmatcher.PublishTicketRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrticketmatcher.PublishTicketRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrticketmatcher.PublishTicketRequest}
 */
proto.dcrticketmatcher.PublishTicketRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSessionId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSplitTx(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSplitTxOutputIndex(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTicketInputScriptsig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrticketmatcher.PublishTicketRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrticketmatcher.PublishTicketRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrticketmatcher.PublishTicketRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dcrticketmatcher.PublishTicketRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSplitTx_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSplitTxOutputIndex();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTicketInputScriptsig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional int32 session_id = 1;
 * @return {number}
 */
proto.dcrticketmatcher.PublishTicketRequest.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.dcrticketmatcher.PublishTicketRequest.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes split_tx = 2;
 * @return {!(string|Uint8Array)}
 */
proto.dcrticketmatcher.PublishTicketRequest.prototype.getSplitTx = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes split_tx = 2;
 * This is a type-conversion wrapper around `getSplitTx()`
 * @return {string}
 */
proto.dcrticketmatcher.PublishTicketRequest.prototype.getSplitTx_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSplitTx()));
};


/**
 * optional bytes split_tx = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSplitTx()`
 * @return {!Uint8Array}
 */
proto.dcrticketmatcher.PublishTicketRequest.prototype.getSplitTx_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSplitTx()));
};


/** @param {!(string|Uint8Array)} value */
proto.dcrticketmatcher.PublishTicketRequest.prototype.setSplitTx = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 split_tx_output_index = 3;
 * @return {number}
 */
proto.dcrticketmatcher.PublishTicketRequest.prototype.getSplitTxOutputIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.dcrticketmatcher.PublishTicketRequest.prototype.setSplitTxOutputIndex = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes ticket_input_scriptsig = 4;
 * @return {!(string|Uint8Array)}
 */
proto.dcrticketmatcher.PublishTicketRequest.prototype.getTicketInputScriptsig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes ticket_input_scriptsig = 4;
 * This is a type-conversion wrapper around `getTicketInputScriptsig()`
 * @return {string}
 */
proto.dcrticketmatcher.PublishTicketRequest.prototype.getTicketInputScriptsig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTicketInputScriptsig()));
};


/**
 * optional bytes ticket_input_scriptsig = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTicketInputScriptsig()`
 * @return {!Uint8Array}
 */
proto.dcrticketmatcher.PublishTicketRequest.prototype.getTicketInputScriptsig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTicketInputScriptsig()));
};


/** @param {!(string|Uint8Array)} value */
proto.dcrticketmatcher.PublishTicketRequest.prototype.setTicketInputScriptsig = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrticketmatcher.PublishTicketResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dcrticketmatcher.PublishTicketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrticketmatcher.PublishTicketResponse.displayName = 'proto.dcrticketmatcher.PublishTicketResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrticketmatcher.PublishTicketResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrticketmatcher.PublishTicketResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrticketmatcher.PublishTicketResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dcrticketmatcher.PublishTicketResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticketTx: msg.getTicketTx_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrticketmatcher.PublishTicketResponse}
 */
proto.dcrticketmatcher.PublishTicketResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrticketmatcher.PublishTicketResponse;
  return proto.dcrticketmatcher.PublishTicketResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrticketmatcher.PublishTicketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrticketmatcher.PublishTicketResponse}
 */
proto.dcrticketmatcher.PublishTicketResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTicketTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrticketmatcher.PublishTicketResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrticketmatcher.PublishTicketResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrticketmatcher.PublishTicketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dcrticketmatcher.PublishTicketResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicketTx_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes ticket_tx = 1;
 * @return {!(string|Uint8Array)}
 */
proto.dcrticketmatcher.PublishTicketResponse.prototype.getTicketTx = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ticket_tx = 1;
 * This is a type-conversion wrapper around `getTicketTx()`
 * @return {string}
 */
proto.dcrticketmatcher.PublishTicketResponse.prototype.getTicketTx_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTicketTx()));
};


/**
 * optional bytes ticket_tx = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTicketTx()`
 * @return {!Uint8Array}
 */
proto.dcrticketmatcher.PublishTicketResponse.prototype.getTicketTx_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTicketTx()));
};


/** @param {!(string|Uint8Array)} value */
proto.dcrticketmatcher.PublishTicketResponse.prototype.setTicketTx = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrticketmatcher.StatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dcrticketmatcher.StatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrticketmatcher.StatusRequest.displayName = 'proto.dcrticketmatcher.StatusRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrticketmatcher.StatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrticketmatcher.StatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrticketmatcher.StatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dcrticketmatcher.StatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrticketmatcher.StatusRequest}
 */
proto.dcrticketmatcher.StatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrticketmatcher.StatusRequest;
  return proto.dcrticketmatcher.StatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrticketmatcher.StatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrticketmatcher.StatusRequest}
 */
proto.dcrticketmatcher.StatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrticketmatcher.StatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrticketmatcher.StatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrticketmatcher.StatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dcrticketmatcher.StatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrticketmatcher.StatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dcrticketmatcher.StatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrticketmatcher.StatusResponse.displayName = 'proto.dcrticketmatcher.StatusResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrticketmatcher.StatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrticketmatcher.StatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrticketmatcher.StatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dcrticketmatcher.StatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticketPrice: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrticketmatcher.StatusResponse}
 */
proto.dcrticketmatcher.StatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrticketmatcher.StatusResponse;
  return proto.dcrticketmatcher.StatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrticketmatcher.StatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrticketmatcher.StatusResponse}
 */
proto.dcrticketmatcher.StatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTicketPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrticketmatcher.StatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrticketmatcher.StatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrticketmatcher.StatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dcrticketmatcher.StatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicketPrice();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 ticket_price = 1;
 * @return {number}
 */
proto.dcrticketmatcher.StatusResponse.prototype.getTicketPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.dcrticketmatcher.StatusResponse.prototype.setTicketPrice = function(value) {
  jspb.Message.setField(this, 1, value);
};


goog.object.extend(exports, proto.dcrticketmatcher);
